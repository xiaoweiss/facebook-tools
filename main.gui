import tkinter as tk
from tkinter import ttk, messagebox
from threading import Thread
from main import main_operation, TaskType, APIClient
import sys
import platform
import time

class BillingGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Facebook自动化工具")
        self.geometry("800x600")
        self._configure_platform()
        self._init_components()
        self.auth_valid = False

    def _configure_platform(self):
        """平台兼容性配置"""
        if platform.system() == 'Windows':
            self._windows_config()
        elif platform.system() == 'Darwin':
            self._macos_config()

    def _windows_config(self):
        """Windows专用配置"""
        # 高DPI适配
        if sys.getwindowsversion().build >= 14393:
            from ctypes import windll
            windll.shcore.SetProcessDpiAwareness(1)
        
        # 设置窗口图标
        try:
            self.iconbitmap('app.ico')
        except Exception as e:
            print(f"图标加载失败: {str(e)}")
        
        # 使用系统主题
        self.style = ttk.Style()
        self.style.theme_use('vista')

    def _macos_config(self):
        """macOS专用配置"""
        # 隐藏多余菜单项
        self.tk.call('tk', 'scaling', 2.0)
        self.tk.call('namespace', 'import', 'ttk::theme::aqua')

    def _init_components(self):
        main_frame = ttk.Frame(self, padding=20)
        main_frame.pack(expand=True, fill='both')

        # 授权区
        auth_frame = ttk.LabelFrame(main_frame, text="系统授权")
        auth_frame.pack(fill='x', pady=10)
        
        ttk.Label(auth_frame, text="授权账号:").grid(row=0, column=0, padx=5)
        self.auth_entry = ttk.Entry(auth_frame, width=30)
        self.auth_entry.grid(row=0, column=1, padx=5)
        
        self.auth_btn = ttk.Button(auth_frame, text="验证授权", command=self._start_auth)
        self.auth_btn.grid(row=0, column=2, padx=10)
        self.auth_status = ttk.Label(auth_frame, text="❌ 未授权", foreground='red')
        self.auth_status.grid(row=0, column=3, padx=5)

        # 任务区
        task_frame = ttk.LabelFrame(main_frame, text="任务选择")
        task_frame.pack(fill='x', pady=10)
        
        self.task_var = tk.IntVar(value=1)
        ttk.Radiobutton(task_frame, text="查询余额", variable=self.task_var,
                       value=TaskType.CHECK_BALANCE.value).pack(side=tk.LEFT, padx=20)
        ttk.Radiobutton(task_frame, text="创建广告", variable=self.task_var,
                       value=TaskType.CREATE_AD.value).pack(side=tk.LEFT, padx=20)

        # 新增定时任务区
        schedule_frame = ttk.LabelFrame(main_frame, text="定时设置")
        schedule_frame.pack(fill='x', pady=10)
        
        ttk.Label(schedule_frame, text="执行频率:").grid(row=0, column=0)
        self.schedule_mode = ttk.Combobox(schedule_frame, values=["单次", "每日", "每周"], state="readonly")
        self.schedule_mode.grid(row=0, column=1)
        self.schedule_mode.current(0)
        
        ttk.Label(schedule_frame, text="间隔小时:").grid(row=0, column=2)
        self.interval = ttk.Spinbox(schedule_frame, from_=1, to=24, width=5)
        self.interval.grid(row=0, column=3)
        
        self.weekdays_var = tk.StringVar()
        weekdays_frame = ttk.Frame(schedule_frame)
        weekdays_frame.grid(row=1, column=0, columnspan=4, pady=5)
        for i, day in enumerate(["周一","周二","周三","周四","周五","周六","周日"]):
            cb = ttk.Checkbutton(weekdays_frame, text=day, variable=self.weekdays_var)
            cb.grid(row=0, column=i, padx=2)

        # 操作区
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(pady=15)
        
        self.start_btn = ttk.Button(btn_frame, text="开始执行", state='disabled', command=self._start_task)
        self.start_btn.pack(side=tk.LEFT, padx=10)
        ttk.Button(btn_frame, text="退出", command=self.destroy).pack(side=tk.RIGHT, padx=10)

        # 日志区
        log_frame = ttk.LabelFrame(main_frame, text="执行日志")
        log_frame.pack(expand=True, fill='both')
        
        self.log_area = tk.Text(log_frame, wrap=tk.WORD, state='disabled')
        scroll = ttk.Scrollbar(log_frame, command=self.log_area.yview)
        self.log_area.configure(yscrollcommand=scroll.set)
        
        scroll.pack(side=tk.RIGHT, fill='y')
        self.log_area.pack(expand=True, fill='both')

    def _start_auth(self):
        """启动授权流程"""
        username = self.auth_entry.get().strip()
        if not username:
            self._show_error("请输入授权账号")
            return
        
        self.auth_btn.config(state='disabled', text="验证中...")
        Thread(target=self._perform_auth, args=(username,), daemon=True).start()

    def _perform_auth(self, username):
        """完全复用main.py的鉴权流程"""
        try:
            client = APIClient()
            while True:
                response = client.get_auth_token(username)
                
                if response and response.get('code') == 1:
                    self.after(0, self._update_auth_status, True, "✅ 授权成功")
                    self.after(0, self.start_btn.config, {'state': 'normal'})
                    self._log(f"用户 {username} 授权通过")
                    break
                else:
                    self.after(0, self._show_error, "授权失败，请检查账号")
                    self.after(0, self.auth_entry.delete, 0, tk.END)
                    break
        except Exception as e:
            self._log(f"授权异常: {str(e)}", error=True)
        finally:
            self.after(0, self.auth_btn.config, {'state': 'normal', 'text': '验证授权'})

    def _start_task(self):
        """解析定时参数"""
        schedule_config = {
            'mode': self.schedule_mode.get(),
            'interval': int(self.interval.get()),
            'weekdays': self.weekdays_var.get().split()
        }
        Thread(target=self._schedule_runner, args=(schedule_config,)).start()

    def _schedule_runner(self, config):
        """定时任务执行器"""
        from apscheduler.schedulers.background import BackgroundScheduler
        scheduler = BackgroundScheduler()
        
        if config['mode'] == '每日':
            scheduler.add_job(self._execute_task, 'interval', hours=config['interval'])
        elif config['mode'] == '每周':
            scheduler.add_job(self._execute_task, 'cron', day_of_week=','.join(config['weekdays']))
        else:
            self._execute_task()
            return
            
        scheduler.start()
        try:
            while True: 
                time.sleep(1)
        except (KeyboardInterrupt, SystemExit):
            scheduler.shutdown()

    def _execute_task(self, username, task_type):
        """执行主任务（保持原有逻辑）"""
        try:
            self._log(f"🚀 开始执行任务 | 用户: {username} | 类型: {TaskType(task_type).name}")
            main_operation(TaskType(task_type), username)
            self._log("✅ 任务执行完成")
        except Exception as e:
            self._log(f"❌ 执行失败: {str(e)}", error=True)
        finally:
            self.after(0, self.start_btn.config, {'state': 'normal', 'text': '开始执行'})

    def _update_auth_status(self, success, message):
        """更新授权状态"""
        color = 'green' if success else 'red'
        self.auth_status.config(text=message, foreground=color)
        self.auth_valid = success

    def _log(self, message, error=False):
        """记录日志"""
        self.log_area.config(state='normal')
        self.log_area.insert(tk.END, message + "\n")
        if error:
            self.log_area.tag_add('error', 'end-1c linestart', 'end-1c lineend')
            self.log_area.tag_config('error', foreground='red')
        self.log_area.see(tk.END)
        self.log_area.config(state='disabled')

    def _show_error(self, message):
        """显示错误提示"""
        messagebox.showerror("错误", message)

if __name__ == "__main__":
    app = BillingGUI()
    app.mainloop() 